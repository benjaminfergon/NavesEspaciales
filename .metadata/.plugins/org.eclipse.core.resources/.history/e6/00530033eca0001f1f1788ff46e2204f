package com.example.demo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import com.naves.model.SpaceShip;
import com.naves.repository.SpaceShipRepository;
import com.naves.service.SpaceShipService;

@SpringBootTest
@ExtendWith(MockitoExtension.class) // Necesario para usar Mockito con JUnit 5

public class NavesApplicationTests {
	
	@Mock
    private SpaceShipRepository spaceShipRep; // Simulamos el repositorio

    @InjectMocks
    private SpaceShipService spaceShipService; // Inyectamos el servicio que usa el repositorio simulado

    // Prueba para obtener una nave por su ID

    @Test
    void testGetShipById() {
        Long shipId = 1L;
        SpaceShip spaceship = new SpaceShip(shipId, "X-Wing", "Star Wars", "Fighter");

        // Definimos el comportamiento del mock
        when(spaceShipRep.findById(shipId)).thenReturn(Optional.of(spaceship));

        // Llamamos al m√©todo del servicio
        SpaceShip result = spaceShipService.getShipById(shipId);

        // Verificamos que el resultado es el esperado
        assertNotNull(result);
        assertEquals(shipId, result.getId());
        assertEquals("X-Wing", result.getName());
    }

}
