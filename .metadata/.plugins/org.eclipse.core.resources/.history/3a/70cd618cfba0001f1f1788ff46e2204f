package com.naves.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

	// Configuración de los filtros de seguridad
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(authorizeRequests ->
                authorizeRequests
                    .requestMatchers("/h2-console/**").permitAll()  // Permite acceso sin autenticación a la consola H2
                    .anyRequest().authenticated()  // Requiere autenticación para cualquier otra solicitud
            )
            .formLogin()  // Configura login por formulario (sin necesidad de withDefaults())
            .loginPage("/login") // Si quieres una página de login personalizada
            .permitAll() // Permite que todos los usuarios puedan acceder al login
            .and()
            .csrf().disable() // Desactiva CSRF para permitir la consola de H2
            .headers().frameOptions().disable();  // Permite que la consola H2 se cargue dentro de un iframe

        return http.build(); // Retorna la configuración de seguridad
    }

    // Configuración del PasswordEncoder
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();  // Usamos BCryptPasswordEncoder para encriptar las contraseñas
    }

    // Servicio para cargar detalles del usuario (puedes personalizar esto si tienes más usuarios)
    @Bean
    public UserDetailsService userDetailsService() {
        return (username) -> User.builder()
                .username("Naves")
                .password(passwordEncoder().encode("pruebaNAVES"))
                .roles("USER")  // Roles de usuario
                .build();  // Construye el usuario con su nombre, contraseña y roles
    }
}
