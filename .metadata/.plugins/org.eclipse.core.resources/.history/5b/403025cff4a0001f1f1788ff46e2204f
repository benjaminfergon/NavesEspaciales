package com.naves.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

	// Configuración de filtros de seguridad
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests()  // Reemplazo de authorizeRequests() con authorizeHttpRequests()
                .requestMatchers("/h2-console/**").permitAll()  // Permite acceso sin autenticación a la consola de H2
                .anyRequest().authenticated()  // Requiere autenticación para cualquier otra solicitud
            .and()
            .formLogin()  // Habilita el login con formulario
            .and()
            .csrf().disable()  // Desactiva CSRF (para permitir la consola H2)
            .headers().frameOptions().disable();  // Permite que se renderice la consola en un iframe
        return http.build();
    }

    // Configuración de PasswordEncoder
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Configuración de autenticación de usuario
    @Bean
    public UserDetailsService userDetailsService() {
        return (username) -> User.builder()
                .username("Naves")
                .password(passwordEncoder().encode("pruebaNAVES"))
                .roles("USER")
                .build();
    }
}
