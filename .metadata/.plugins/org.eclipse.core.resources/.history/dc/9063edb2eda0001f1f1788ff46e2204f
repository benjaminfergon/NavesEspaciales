package com.example.demo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.any;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import com.naves.app.NavesApplication;
import com.naves.model.SpaceShip;
import com.naves.repository.SpaceShipRepository;
import com.naves.service.SpaceShipService;

@SpringBootTest(classes = NavesApplication.class) // Especifica la clase principal si no se detecta automáticamente
@ExtendWith(MockitoExtension.class) // Necesario para usar Mockito con JUnit 5

public class NavesApplicationTests {

	@Mock
	private SpaceShipRepository spaceShipRep; // Simulamos el repositorio

	@InjectMocks
	private SpaceShipService spaceShipService; // Inyectamos el servicio que usa el repositorio simulado

	// Prueba para obtener una nave por su ID

	@Test
	public void testGetShipById() {
		Long shipId = 1L;
		SpaceShip spaceship = new SpaceShip(shipId, "X-Wing", "Star Wars", "Fighter");

		// Definimos el comportamiento del mock
		when(spaceShipRep.findById(shipId)).thenReturn(Optional.of(spaceship));

		// Llamamos al método del servicio
		SpaceShip result = spaceShipService.getShipById(shipId);

		// Verificamos que el resultado es el esperado
		assertNotNull(result);
		assertEquals(shipId, result.getId());
		assertEquals("X-Wing", result.getName());
	}

	// Prueba para crear una nueva nave espacial
	@Test
	public void testCreateSpaceShip() {
		// Arrange: Configura el escenario de prueba
		SpaceShip spaceShip = new SpaceShip(1L, "X-Wing", "Star Wars", "Fighter");
		when(spaceShipRep.save(any(SpaceShip.class))).thenReturn(spaceShip);

		// Act: Llama al método a probar
		SpaceShip createdSpaceShip = spaceShipService.createSpaceShip(spaceShip);

		// Assert: Verifica los resultados
		assertNotNull(createdSpaceShip); // La nave creada no debe ser nula
		assertEquals("X-Wing", createdSpaceShip.getName()); // Verifica el nombre
		assertEquals("Star Wars", createdSpaceShip.getSeries()); // Verifica la serie
		assertEquals("Fighter", createdSpaceShip.getType()); // Verifica el tipo
		verify(spaceShipRep, times(1)).save(spaceShip); // Verifica que save() se haya llamado una vez
	}

}
